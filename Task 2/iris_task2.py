# -*- coding: utf-8 -*-
"""Iris_Task2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RP6W3FUttfFBymfH6TDU9R_5ISHhVw9f

###Importing the libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris

"""###Load The DataSet"""

# Loading DataSet
iris_dataset = load_iris()
iris_dataset = pd.DataFrame(iris_dataset.data, columns = iris_dataset.feature_names)
iris_dataset.head() # The first five rows

"""### Finding the optimum number of clusters for k-means classification"""

# Finding the optimum number of clusters for k-means classification

x = iris_dataset.iloc[:, [0, 1, 2, 3]].values

from sklearn.cluster import KMeans
list_wcss = []

for i in range(1, 11):
    k_means = KMeans(n_clusters = i, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)
    k_means.fit(x)
    list_wcss.append(k_means.inertia_)

"""### Plotting the graph onto a line graph to observe the pattern"""

# Plotting the graph onto a line graph to observe the pattern
plt.figure(facecolor='orange',figsize=(10,8))
plt.plot(range(1, 11), list_wcss)
plt.title('Elbow method')
plt.xlabel('Number of clusters')
plt.ylabel('list_wcss')
plt.show()

"""
### Creating K-Means Classifier
"""

# Applying kmeans to the dataset
k_means = KMeans(n_clusters = 3, init = 'k-means++', max_iter = 300, n_init = 10, random_state = 0)
y_k_means = k_means.fit_predict(x)

"""### Visualising the clusters"""

# Visualising the clusters
plt.figure(figsize=(10,8))
plt.scatter(x[y_k_means == 0, 0], x[y_k_means == 0, 1], s = 100, c = 'orange', label = 'Iris1')

plt.scatter(x[y_k_means == 1, 0], x[y_k_means == 1, 1], s = 100, c = 'm', label = 'Iris2')

plt.scatter(x[y_k_means == 2, 0], x[y_k_means == 2, 1], s = 100, c = 'green', label = 'Iris3')

"""###Plotting the centroids"""

# Plotting the centroids
plt.figure(figsize=(10,8))
plt.scatter(k_means.cluster_centers_[:, 0], k_means.cluster_centers_[:,1], 
            s = 100, c = 'brown', label = 'Cluster_Centroid')

plt.legend()

"""### Now Combining the above graphs together"""

# Visualising the clusters
plt.figure(figsize=(10,8))
plt.scatter(x[y_k_means == 0, 0], x[y_k_means == 0, 1], s = 100, c = 'orange', label = 'Iris1')

plt.scatter(x[y_k_means == 1, 0], x[y_k_means == 1, 1], s = 100, c = 'm', label = 'Iris2')

plt.scatter(x[y_k_means == 2, 0], x[y_k_means == 2, 1], s = 100, c = 'green', label = 'Iris3')

# Plotting the centroids
plt.scatter(k_means.cluster_centers_[:, 0], k_means.cluster_centers_[:,1], 
            s = 100, c = 'brown', label = 'Cluster_Centroid')

plt.legend()